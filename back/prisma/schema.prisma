// This is your Prisma schema file for the RACI SaaS Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WebsiteAdmin {
  id        Int      @id @default(autoincrement()) @map("admin_id")
  fullName  String   @map("full_name")
  email     String   @unique
  password  String
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("website_admins")
}

model Company {
  id         Int          @id @default(autoincrement()) @map("company_id")
  name       String
  logoUrl    String?      @map("logo_url")
  domain     String?
  industry   String?
  size       String?
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  users      User[]
  departments Department[]

  @@map("companies")
}

model User {
  id             Int              @id @default(autoincrement()) @map("user_id")
  fullName       String           @map("full_name")
  email          String           @unique
  password       String
  phone          String?
  designation    String?
  employeeId     String?          @map("employee_id")
  role           Role
  approvalAssign Boolean          @default(false) @map("approval_assign")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  company         Company?         @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId       Int?             @map("company_id")
  department      Department?      @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId    Int?             @map("department_id")
  
  // Relations where User is referenced
  departmentsLed  Department[]     @relation("DepartmentHOD")
  createdEvents   Event[]          @relation("EventCreator")
  approvedEvents  Event[]          @relation("EventApprover")
  eventsAsHod     Event[]          @relation("EventHOD") // Added this relation for Event.hod
  raciAssignments RaciAssignment[]
  raciApprovals   RaciApproval[]   @relation("RaciApprover")
  eventTrackers   EventTracker[]

  @@map("users")
}

model Department {
  id        Int       @id @default(autoincrement()) @map("department_id")
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int       @map("company_id")
  hod        User?     @relation("DepartmentHOD", fields: [hodId], references: [id], onDelete: SetNull)
  hodId      Int?      @map("hod_id")
  
  // Relations where Department is referenced
  users      User[]
  events     Event[]

  @@map("departments")
}

model Event {
  id               Int             @id @default(autoincrement()) @map("event_id")
  name             String
  description      String?
  priority         String?         @map("priority")
  eventType        String?         @map("event_type")
  documentPath     String?         @map("document_path")
  approvalStatus   ApprovalStatus  @default(PENDING) @map("approval_status")
  rejectionReason  String?         @map("rejection_reason")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  department       Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId     Int             @map("department_id")
  hod              User?           @relation("EventHOD", fields: [hodId], references: [id], onDelete: SetNull)
  hodId            Int?            @map("hod_id")
  creator          User?           @relation("EventCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  createdBy        Int?            @map("created_by")
  approver         User?           @relation("EventApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  approvedBy       Int?            @map("approved_by")
  
  // Relations where Event is referenced
  tasks            Task[]
  raciAssignments  RaciAssignment[]
  meetings         RaciMeeting[]
  trackers         EventTracker[]

  @@map("events")
}

// New Task model
model Task {
  id               Int             @id @default(autoincrement()) @map("task_id")
  name             String
  description      String?
  status           String          @default("not_started")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event            Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          Int             @map("event_id")
  
  // Relations where Task is referenced
  raciAssignments  RaciAssignment[]

  @@map("tasks")
}

model RaciAssignment {
  id                Int        @id @default(autoincrement()) @map("raci_id")
  type              RaciType
  financialLimitMin Float?     @map("financial_limit_min")
  financialLimitMax Float?     @map("financial_limit_max")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event             Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           Int        @map("event_id")
  task              Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            Int        @map("task_id")
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int        @map("user_id")
  
  // Relations where RaciAssignment is referenced
  approvals         RaciApproval[]

  @@map("raci_assignments")
}

model RaciApproval {
  id            Int            @id @default(autoincrement()) @map("approval_id")
  approvalLevel Int            @map("approval_level")
  status        ApprovalStatus @default(PENDING)
  reason        String?
  approvedAt    DateTime?      @map("approved_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  raciAssignment RaciAssignment @relation(fields: [raciId], references: [id], onDelete: Cascade)
  raciId         Int            @map("raci_id")
  approver       User?          @relation("RaciApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  approvedBy     Int?           @map("approved_by")

  @@map("raci_approvals")
}

model RaciMeeting {
  id           Int       @id @default(autoincrement()) @map("meeting_id")
  meetingDate  DateTime  @map("meeting_date")
  title        String
  description  String?
  guestUserIds String?   @map("guest_user_ids")
  meetingUrl   String?   @map("meeting_url")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      Int       @map("event_id")

  @@map("raci_meetings")
}

model EventTracker {
  id        Int       @id @default(autoincrement()) @map("tracker_id")
  status    String    @default("pending")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int       @map("event_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @map("user_id")

  @@map("event_trackers")
}

enum Role {
  user
  company_admin
  hod
}

enum RaciType {
  R
  A
  C
  I
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
