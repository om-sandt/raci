const db = require('../config/db');

console.log('üîß Testing RACI Approval Enum Fix...\n');

async function testEnumValues() {
  try {
    // Test inserting with correct enum values
    console.log('1. Testing RACI approval enum values...');
    
    // Check what enum values are actually allowed
    const enumQuery = `
      SELECT unnest(enum_range(NULL::approval_status)) AS status_value;
    `;
    
    try {
      const enumResult = await db.query(enumQuery);
      console.log('‚úÖ Available enum values:');
      enumResult.rows.forEach(row => {
        console.log(`   - ${row.status_value}`);
      });
    } catch (error) {
      console.log('‚ÑπÔ∏è  Could not query enum values directly, checking database structure...');
      
      // Alternative way to check the enum values
      const tableInfo = await db.query(`
        SELECT column_name, data_type, udt_name 
        FROM information_schema.columns 
        WHERE table_name = 'raci_approvals' AND column_name = 'status'
      `);
      
      if (tableInfo.rows.length > 0) {
        console.log('‚úÖ Status column info:', tableInfo.rows[0]);
      }
    }
    
    console.log('\n2. Testing database operations with correct enum values...');
    
    // Test that we can query with uppercase values
    const testQuery = `
      SELECT COUNT(*) as count 
      FROM raci_approvals 
      WHERE status IN ('PENDING', 'APPROVED', 'REJECTED')
    `;
    
    const testResult = await db.query(testQuery);
    console.log(`‚úÖ Query with uppercase enum values successful: ${testResult.rows[0].count} records found`);
    
    console.log('\n‚úÖ Enum fix verification completed successfully!');
    console.log('‚úÖ All enum values are now using uppercase format: PENDING, APPROVED, REJECTED');
    
  } catch (error) {
    console.error('‚ùå Enum test failed:', error.message);
    
    if (error.message.includes('invalid input value for enum')) {
      console.log('\nüí° The error suggests enum values are still incorrect.');
      console.log('   Make sure the database uses uppercase enum values.');
    }
  }
}

async function runTest() {
  try {
    await testEnumValues();
    
    console.log('\nüìã Summary of fixes applied:');
    console.log('‚úÖ createRaciApprovals: "pending" ‚Üí "PENDING"');
    console.log('‚úÖ getPendingApprovals: "pending" ‚Üí "PENDING"');
    console.log('‚úÖ getRaciMatrixForApproval: "pending" ‚Üí "PENDING" (2 instances)');
    console.log('‚úÖ approveRejectRaciMatrix: "pending" ‚Üí "PENDING", "approved"/"rejected" ‚Üí "APPROVED"/"REJECTED"');
    console.log('‚úÖ getRaciApprovalStatus: "approved"/"rejected"/"pending" ‚Üí "APPROVED"/"REJECTED"/"PENDING"');
    
    console.log('\nüöÄ The RACI approval functionality should now work correctly!');
    
  } catch (error) {
    console.error('Test failed:', error.message);
  }
}

runTest().catch(console.error); 